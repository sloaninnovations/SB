<?php
/**
 * @file
 * Drupal needs this blank file.
 */

/**
 * 
 * @param type $component
 */
function sage_menu_pre_features_revert($component) {
  if ($component == 'menu_links') {
    // Clear out any existing links in the main menu.
    if (variable_get('base_domain', FALSE)) { // If we get this it is safe to delete the main menu.
      menu_delete_links('main-menu');
    }
  }
}

/**
 * Implements hook_menu_default_menu_links_alter.
 * 
 * Alter the importing menu links so that they have the correct domain and 
 * local path.
 * 
 * @param type $menu_links
 */
function sage_menu_menu_default_menu_links_alter(&$menu_links) {
  $menu_items = $menu_links; // Need this so we don't double loop through.
  foreach($menu_items as $key => $menu_link) {
    if ($menu_link['menu_name'] == 'main-menu') {
      if (!variable_get('base_domain', FALSE)) { // If there is no domain, DON'T do an import.
        unset($menu_links[$key]);
      }
      else {
        $menu_link['link_path'] = sage_menu_internal_link($menu_link['link_path']);
        if (isset($menu_link['parent_path'])) {
          $menu_link['parent_path'] = sage_menu_internal_link($menu_link['parent_path']);
        }
        // Replace old menu link with new link.
        $parts = explode(':', $key);
        $first = array_shift($parts);
        $new_key = $first . ':' . sage_menu_internal_link(implode(':', $parts));
        if ($new_key != $key) {
          unset($menu_links[$key]);
        }
        $menu_links[$new_key] = $menu_link;
      }
    }
  }
}

/**
 * Function to fix the urls for other domains. First it replaces the base domain for the link
 * and then it removes the domain prefix if it is the current domain.
 * 
 * Then it looks up if it is an alias and points it to the proper location.
 * 
 * @param type $string
 * @param type $current
 * @param type $base
 * @return type
 */
function sage_menu_internal_link($string) {
  $current = variable_get('current_domain', 'sage-prod.info');
  $base = variable_get('base_domain', 'sage-prod.info');
  $path = str_replace('base-domain', $base, $string);
  $path = str_replace('http://' . $current . '/', '', $path);
  $path = drupal_get_normal_path($path);
  if ($path == '') {
    return '<front>';
  }
  return $path;
}

/**
 * Turns an internal url into an external url. IE adding the base domain.
 * 
 * @param type $string
 */
function sage_menu_external_link($string) {
  $base = variable_get('base_domain', 'sage-prod.info');
  $path = url($string, array('absolute' => TRUE));
  $path = str_replace($base, 'base-domain', $path);
  return $path;
}

/**
 * Implements hook_features_api_alter()
 * 
 * Change the callback for menu links.
 */
function sage_menu_features_api_alter(&$components) {
  $components['menu_links']['base'] = 'sage_menu';
}

/**
 * Implements hook_features_export_options().
 */
function sage_menu_features_export_options() {
  global $menu_admin;
  // Need to set this to TRUE in order to get menu links that the
  // current user may not have access to (i.e. user/login)
  $menu_admin = TRUE;
  $menu_links = menu_parent_options(menu_get_menus(), array('mlid' => 0));
  $options = array();
  foreach ($menu_links as $key => $name) {
    list($menu_name, $mlid) = explode(':', $key, 2);
    if ($mlid != 0) {
      $link = menu_link_load($mlid);
      $identifier = sage_menu_features_identifier($link);
      $options[$identifier] = "{$menu_name}: {$name}";
    }
  }
  $menu_admin = FALSE;
  return $options;
}

/**
 * Callback for generating the menu link exportable identifier.
 */
function sage_menu_features_identifier($link) {
  static $base_domain;
  if (!isset($base_domain) && !$base_domain) {
    $base_domain = variable_get('base_domain', FALSE);
  }
  if (!isset($link['menu_name']) || !$base_domain) {
    return FALSE; // No domain set so don't return anything.
  }
  $path = sage_menu_external_link($link['link_path']);
  return "{$link['menu_name']}:{$path}";
}

/**
 * Implements hook_features_export().
 */
function sage_menu_features_export($data, &$export, $module_name = '') {
  // Default hooks are provided by the feature module so we need to add
  // it as a dependency.
  $export['dependencies']['features'] = 'features';
  $export['dependencies']['menu'] = 'menu';

  // Collect a link to module map
  $pipe = array();
  $map = features_get_default_map('menu_links', 'sage_menu_features_identifier');
  foreach ($data as $identifier) {
    if ($link = sage_menu_link_load($identifier)) {
      // If this link is provided by a different module, add it as a dependency.
      if (isset($map[$identifier]) && $map[$identifier] != $module_name) {
        $export['dependencies'][$map[$identifier]] = $map[$identifier];
      }
      else {
        $export['features']['menu_links'][$identifier] = $identifier;
      }
      // For now, exclude a variety of common menus from automatic export.
      // They may still be explicitly included in a Feature if the builder
      // chooses to do so.
      if (!in_array($link['menu_name'], array('features', 'primary-links', 'secondary-links', 'navigation', 'admin', 'devel'))) {
        $pipe['menu_custom'][] = $link['menu_name'];
      }
    }
  }
  return $pipe;
}

/**
 * Implements hook_features_export_render()
 */
function sage_menu_features_export_render($module, $data) {
  $code = array();
  $code[] = '  $menu_links = array();';
  $code[] = '';

  $translatables = array();
  foreach ($data as $identifier) {
    if ($link = sage_menu_link_load($identifier)) {
      $link['link_path'] = sage_menu_external_link($link['link_path']);
      // Replace plid with a parent path.
      if (!empty($link['plid']) && $parent = menu_link_load($link['plid'])) {
        $link['parent_path'] = sage_menu_external_link($parent['link_path']);
      }
      unset($link['plid']);
      unset($link['mlid']);

      $code[] = "  // Exported menu link: {$identifier}";
      $code[] = "  \$menu_links['{$identifier}'] = ". features_var_export($link, '  ') .";";
      $translatables[] = $link['link_title'];
    }
  }
  if (!empty($translatables)) {
    $code[] = features_translatables_export($translatables, '  ');
  }

  $code[] = '';
  $code[] = '  return $menu_links;';
  $code = implode("\n", $code);
  return array('menu_default_menu_links' => $code);
}

/**
 * Implements hook_features_revert().
 */
function sage_menu_features_revert($module) {
  sage_menu_features_rebuild($module);
}

/**
 * Implements hook_features_rebuild().
 */
function sage_menu_features_rebuild($module) {
  if ($menu_links = features_get_default('menu_links', $module)) {
    sage_menu_features_rebuild_ordered($menu_links);
  }
}

/**
 * Generate a depth tree of all menu links.
 */
function sage_menu_features_rebuild_ordered($menu_links, $reset = FALSE) {
  static $ordered;
  static $all_links;
  if (!isset($ordered) || $reset) {
    $ordered = array();
    $unordered = features_get_default('menu_links');

    // Order all links by depth.
    if ($unordered) {
      do {
        $current = count($unordered);
        foreach ($unordered as $key => $link) {
          $identifier = menu_links_features_identifier($link);
          $parent = isset($link['parent_path']) ? "{$link['menu_name']}:{$link['parent_path']}" : '';
          if (empty($parent)) {
            $ordered[$identifier] = 0;
            $all_links[$identifier] = $link;
            unset($unordered[$key]);
          }
          elseif (isset($ordered[$parent])) {
            $ordered[$identifier] = $ordered[$parent] + 1;
            $all_links[$identifier] = $link;
            unset($unordered[$key]);
          }
        }
      } while (count($unordered) < $current);
    }
    asort($ordered);
  }

  // Ensure any default menu items that do not exist are created.
  foreach (array_keys($ordered) as $identifier) {
    $link = $all_links[$identifier];
    $existing = sage_menu_link_load($identifier);
    if (!$existing || in_array($link, $menu_links)) {
      // Retrieve the mlid if this is an existing item.
      if ($existing) {
        $link['mlid'] = $existing['mlid'];
      }
      // Retrieve the plid for a parent link.
      if (!empty($link['parent_path']) && $parent = sage_menu_link_load("{$link['menu_name']}:{$link['parent_path']}")) {
        $link['plid'] = $parent['mlid'];
      }
      else {
        $link['plid'] = 0;
      }
      menu_link_save($link);
    }
  }
}

/**
 * Load a menu link by its menu_name:link_path identifier.
 */
function sage_menu_link_load($identifier) {
  list($menu_name, $link_path) = explode(':', $identifier, 2);
  $link_path = sage_menu_internal_link($link_path);
  $link = db_select('menu_links')
    ->fields('menu_links', array('menu_name', 'mlid', 'plid', 'link_path', 'router_path', 'link_title', 'options', 'module', 'hidden', 'external', 'has_children', 'expanded', 'weight'))
    ->condition('menu_name', $menu_name)
    ->condition('link_path', $link_path)
    ->execute()
    ->fetchAssoc();
  if ($link) {
    $link['options'] = unserialize($link['options']);
    return $link;
  }
  return FALSE;
}
