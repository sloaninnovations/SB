<?php

/**
 * @file
 * Provides a guide of styles supported by the theme.
 */

/**
 * Implementation of hook_menu().
 */
function styler_menu() {
  $items['admin/appearance/style-guide'] = array(
    'title' => 'Style Guide',
    'description' => 'View a theme supported style guide.',
    'page callback' => 'styler_callback',
    'access callback' => 'styler_access',
    'theme callback' => 'styler_theme_callback',
  );
  return $items;
}

/**
* No overlay for the style guide.
*
* Implements hook_admin_paths()
*/
function styler_admin_paths() {
  $paths = array(
    'admin/appearance/style-guide' => FALSE,
  );
  return $paths;
}

function styler_get_theme() {
  $custom_themes = array_filter(module_invoke_all('custom_theme'), 'drupal_theme_access');
  if (!empty($custom_themes)) {
    $custom_theme = array_pop($custom_themes);
    return $custom_theme;
  }
  if (isset($GLOBAL['theme_key'])) {
    return $GLOBAL['theme_key'];
  }
  return variable_get('theme_default', 'bartik');
}

function styler_theme_styles(&$styles = array()) {
  $theme_path = drupal_get_path('theme', styler_get_theme());
  if (file_exists($theme_path . '/styler.inc')) {
    include $theme_path . '/styler.inc';
  }
}

function styler_access() {
  return TRUE;
  $theme_path = drupal_get_path('theme', styler_get_theme());
  if (file_exists($theme_path . '/styler.inc')) {
    return TRUE;
  }
  return FALSE;
}

function styler_theme_callback() {
  return styler_get_theme();
}

function styler_callback() {
  drupal_add_css(drupal_get_path('module', 'styler') . '/styler.css');
  $build = array();
  $styles = styler_default_styles();
  styler_theme_styles($styles);
  $required = array('title', 'element');
  foreach ($styles as $name => $style) {
    foreach ($required as $property) {
      if (!isset($style[$property])) {
        drupal_set_message(t('Incorrect configuration detected! There needs to be an "%property" property in the style: %style.', array('%property' => $property, '%style' => $name)), 'error');
        continue;
      }
    }
    foreach ($styles as $name => $style) {
      $code = $style['element']['#value'];
      if ($style['element']['#tag'] != 'markup') {
        $code = theme('html_tag', array('element' => $style['element']));
      }
      $block = new stdClass();
      $block->module = 'styler';
      $block->delta = $name;
      $block->region = 'content';
      $block->subject = $style['title'];
      $variables = array();
      $variables['elements']['#block'] = $block;
      $variables['elements']['#children'] = '';
      if (isset($style['description'])) {
        $variables['elements']['#children'] .= '<div class="well well-small">' . $style['description'] . '</div>';
      }
      $variables['elements']['#children'] .= '<div class="row-fluid">
        <div class="span4">
          ' . $code .'
        </div>
        <div class="span7 offset1">
          <pre><code>' . htmlentities($code) . '</code></pre>
        </div>
      </div>';
      $build[$name]['#markup'] = theme('block', $variables);
      
      drupal_add_region_content('sidebar_first', 'testing');
    }
  }
  return $build;
}

function styler_default_styles() {
  $styles['type'] = array(
    'title' => 'Typography',
    'element' => array(
      '#tag' => 'markup',
      '#value' => '<h1 id="page-title">Page Title</h1>
<h1>Heading 1</h1>
<h2>Heading 2</h1>
<h3>Heading 3</h1>
<h4>Heading 4</h1>
<h5>Heading 5</h1>
<h6>Heading 6</h1>
<div class="block"><h2 class="block-title">Block Title</h1></div>
<aside><div class="block"><h2 class="block-title">Sidebar Block Title</h1></div></aside>
<p><strong>Paragraph of text</strong> - Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Nullam id dolor id nibh ultricies vehicula ut id elit. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Nulla vitae elit libero, a pharetra augue.</p>
'
    ),
  );
  $items = array('List Item', 'List Item', 'List Item');
  $styles['ul'] = array(
    'title' => 'Unordered List',
    'element' => array(
      '#tag' => 'ul',
      '#value' => '
  <li>List Item</li>
  <li>List Item</li>
  <li>List Item</li>
'
    ),
  );
  $styles['ol'] = array(
    'title' => 'Ordered List',
    'element' => array(
      '#tag' => 'ol',
      '#value' => '
  <li>List Item</li>
  <li>List Item</li>
  <li>List Item</li>
'
    ),
  );
  $tree = menu_tree('main-menu');
  $styles['menu_tree'] = array(
    'title' => 'Menu Tree',
    'element' => array(
      '#tag' => 'markup',
      '#value' => render($tree),
    ),
  );
  $styles['blockquote'] = array(
    'title' => 'Block Quote',
    'description' => t('NOTE: To have the byline appended in small print and indented, you must use the %footer tag.', array('%footer' => '<footer>')),
    'element' => array(
      '#tag' => 'blockquote',
      '#value' => '
  Etiam porta sem malesuada magna mollis euismod. Praesent commodo cursus magna, vel scelerisque nisl consectetur et.
  <footer>John Doe, President<cite>ACME Inc.</cite></footer>
'
    ),
  );
  $styles['pullquote'] = array(
    'title' => 'Pull Quote',
    'description' => t('This offers a different type of quote, generally used for pulling site generated content instead of an individual\'s quote.'),
    'element' => array(
      '#tag' => 'blockquote',
      '#attributes' => array(
        'class' => 'pullquote',
      ),
      '#value' => '
  Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Lorem ipsum dolor sit amet, consectetur adipiscing elit.
'
    ),
  );
  return $styles;
}